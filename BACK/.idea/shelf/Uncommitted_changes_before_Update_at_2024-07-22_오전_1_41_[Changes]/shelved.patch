Index: src/main/java/rofla/back/back/service/BehaviorService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package rofla.back.back.service;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\nimport rofla.back.back.model.Behavior;\r\nimport rofla.back.back.model.Order;\r\nimport rofla.back.back.repository.BehaviorRepository;\r\n\r\nimport java.util.Optional;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\n\r\npublic class BehaviorService {\r\n\r\n        private final BehaviorRepository behaviorRepository;\r\n\r\n        // 활동 등록\r\n        public void saveBehaivor(Behavior behavior) {\r\n            if (behaviorRepository.findByUsername(behavior.getUsername()).isPresent()) {\r\n                throw new IllegalArgumentException(\"동일한 활동이 존재 합니다.\");\r\n            }\r\n        }\r\n\r\n        //조회\r\n        public Optional<Behavior> searchBehaviorByUsername(String username) {\r\n            return behaviorRepository.findByUsername(username);\r\n        }\r\n\r\n        //수정\r\n        public Optional<Behavior> modifyBehavior(Behavior newbehavior) {\r\n            return behaviorRepository.findByUsername(newbehavior.getUsername())\r\n                    .map(Behavior -> {\r\n                        Behavior.setUsername(newbehavior.getUsername());\r\n                        Behavior.setUser(newbehavior.getUser());\r\n                        Behavior.setRest(newbehavior.getRest());\r\n                        Behavior.setMeal(newbehavior.getMeal());\r\n                        Behavior.setStudy(newbehavior.getStudy());\r\n                        Behavior.setExercise(newbehavior.getExercise());\r\n                        Behavior.setHobby(newbehavior.getHobby());\r\n                        return behaviorRepository.save(Behavior);\r\n                    });\r\n        }\r\n\r\n\r\n        //삭제\r\n        public void deleteBehavior(Behavior behavior) {\r\n            if(behaviorRepository.findByUsername(behavior.getUsername()).isPresent()) {\r\n                behaviorRepository.delete(behaviorRepository.findByUsername(behavior.getUsername()).get());\r\n            }\r\n            else {\r\n                System.out.println(\"not Present in DB!\");\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/rofla/back/back/service/BehaviorService.java b/src/main/java/rofla/back/back/service/BehaviorService.java
--- a/src/main/java/rofla/back/back/service/BehaviorService.java	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
+++ b/src/main/java/rofla/back/back/service/BehaviorService.java	(date 1721580030266)
@@ -3,7 +3,6 @@
 import lombok.RequiredArgsConstructor;
 import org.springframework.stereotype.Service;
 import rofla.back.back.model.Behavior;
-import rofla.back.back.model.Order;
 import rofla.back.back.repository.BehaviorRepository;
 
 import java.util.Optional;
@@ -52,6 +51,5 @@
                 System.out.println("not Present in DB!");
             }
         }
-    }
+}
 
-}
Index: src/main/java/rofla/back/back/jwt/CustomUserDetails.java
===================================================================
diff --git a/src/main/java/rofla/back/back/jwt/CustomUserDetails.java b/src/main/java/rofla/back/back/jwt/CustomUserDetails.java
deleted file mode 100644
--- a/src/main/java/rofla/back/back/jwt/CustomUserDetails.java	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
+++ /dev/null	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
@@ -1,75 +0,0 @@
-package rofla.back.back.jwt;
-
-import org.springframework.security.core.GrantedAuthority;
-import org.springframework.security.core.userdetails.UserDetails;
-import rofla.back.back.model.User;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Optional;
-
-public class CustomUserDetails implements UserDetails {
-
-    private final User userEntity;
-
-    public CustomUserDetails(User userEntity) {
-
-        this.userEntity = userEntity;
-    }
-
-    public CustomUserDetails(Optional<User> users) {
-        this.userEntity = users.get();
-    }
-
-
-    @Override
-    public Collection<? extends GrantedAuthority> getAuthorities() {
-
-        Collection<GrantedAuthority> collection = new ArrayList<>();
-
-        collection.add(new GrantedAuthority() {
-
-            @Override
-            public String getAuthority() {
-                return userEntity.getRole();
-            }
-        });
-
-        return collection;
-    }
-
-    @Override
-    public String getPassword() {
-        return userEntity.getPassword();
-    }
-
-    @Override
-    public String getUsername() {
-
-        return userEntity.getUsername();
-    }
-
-    @Override
-    public boolean isAccountNonExpired() {
-
-        return true;
-    }
-
-    @Override
-    public boolean isAccountNonLocked() {
-
-        return true;
-    }
-
-    @Override
-    public boolean isCredentialsNonExpired() {
-
-        return true;
-    }
-
-    @Override
-    public boolean isEnabled() {
-
-        return true;
-    }
-}
\ No newline at end of file
Index: src/main/java/rofla/back/back/jwt/JWTUtil.java
===================================================================
diff --git a/src/main/java/rofla/back/back/jwt/JWTUtil.java b/src/main/java/rofla/back/back/jwt/JWTUtil.java
deleted file mode 100644
--- a/src/main/java/rofla/back/back/jwt/JWTUtil.java	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
+++ /dev/null	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
@@ -1,56 +0,0 @@
-package rofla.back.back.jwt;
-
-import io.jsonwebtoken.Jwts;
-import jakarta.servlet.http.HttpServletRequest;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.stereotype.Component;
-
-import javax.crypto.SecretKey;
-import javax.crypto.spec.SecretKeySpec;
-import java.nio.charset.StandardCharsets;
-import java.util.Date;
-
-@Component
-public class JWTUtil {
-
-    private SecretKey secretKey;
-
-    public JWTUtil(@Value("${spring.jwt.secret}")String secret) {
-
-        this.secretKey = new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), Jwts.SIG.HS256.key().build().getAlgorithm());
-    }
-
-    // JWT 안에 username 에 대한 정보 반환 -> User 의 studentId와 같은 항목
-    public String getUsername(String token) {
-
-        return Jwts.parser().verifyWith(secretKey).build().parseSignedClaims(token).getPayload().get("username", String.class);
-    }
-
-    public String getRole(String token) {
-
-        return Jwts.parser().verifyWith(secretKey).build().parseSignedClaims(token).getPayload().get("role", String.class);
-    }
-
-    public Boolean isExpired(String token) {
-
-        return Jwts.parser().verifyWith(secretKey).build().parseSignedClaims(token).getPayload().getExpiration().before(new Date());
-    }
-
-    // HttpServletRequest request 에서 토큰 파싱 함수
-    public String getToken(HttpServletRequest request) {
-        String authorization= request.getHeader("Authorization");
-        String token = authorization.split(" ")[1];
-        return token;
-    }
-
-
-    public String createJwt(String username, String role, Long expiredMs) {
-        return Jwts.builder()
-                .claim("username", username)
-                .claim("role", role)
-                .issuedAt(new Date(System.currentTimeMillis()))
-                .expiration(new Date(System.currentTimeMillis() + expiredMs))
-                .signWith(secretKey)
-                .compact();
-    }
-}
Index: src/main/java/rofla/back/back/config/SecurityConfig.java
===================================================================
diff --git a/src/main/java/rofla/back/back/config/SecurityConfig.java b/src/main/java/rofla/back/back/config/SecurityConfig.java
deleted file mode 100644
--- a/src/main/java/rofla/back/back/config/SecurityConfig.java	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
+++ /dev/null	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
@@ -1,79 +0,0 @@
-package rofla.back.back.config;
-
-
-import lombok.RequiredArgsConstructor;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.security.authentication.AuthenticationManager;
-import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
-import org.springframework.security.config.annotation.web.builders.HttpSecurity;
-import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
-import org.springframework.security.config.http.SessionCreationPolicy;
-import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
-import org.springframework.security.web.SecurityFilterChain;
-import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
-import rofla.back.back.filter.JWTFilter;
-import rofla.back.back.filter.LoginFilter;
-import rofla.back.back.jwt.JWTUtil;
-
-@Configuration
-@EnableWebSecurity
-@RequiredArgsConstructor
-public class SecurityConfig {
-
-    private final AuthenticationConfiguration authenticationConfiguration;
-    private final JWTUtil jwtUtil;
-
-//    public SecurityConfig(AuthenticationConfiguration authenticationConfiguration, JWTUtil jwtUtil) {
-//
-//        this.authenticationConfiguration = authenticationConfiguration;
-//        this.jwtUtil = jwtUtil;
-//    }
-
-    @Bean
-    public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
-
-        return configuration.getAuthenticationManager();
-    }
-
-    @Bean
-    public BCryptPasswordEncoder bCryptPasswordEncoder() {
-
-        return new BCryptPasswordEncoder();
-    }
-
-    @Bean
-    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
-
-        //csrf disable
-        http
-                .csrf((auth) -> auth.disable());
-
-        //From 로그인 방식 disable
-        http
-                .formLogin((auth) -> auth.disable());
-
-        //http basic 인증 방식 disable
-        http
-                .httpBasic((auth) -> auth.disable());
-
-
-        http
-                .authorizeHttpRequests((auth) -> auth
-                        .requestMatchers("/login", "/", "/User/join").permitAll()
-                        .requestMatchers("/admin").hasRole("ADMIN")
-                        .anyRequest().authenticated());
-
-        http
-                .addFilterBefore(new JWTFilter(jwtUtil), LoginFilter.class);
-        http
-                .addFilterAt(new LoginFilter(authenticationManager(authenticationConfiguration), jwtUtil), UsernamePasswordAuthenticationFilter.class);
-
-        //세션 설정
-        http
-                .sessionManagement((session) -> session
-                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS));
-
-        return http.build();
-    }
-}
Index: src/main/java/rofla/back/back/filter/JWTFilter.java
===================================================================
diff --git a/src/main/java/rofla/back/back/filter/JWTFilter.java b/src/main/java/rofla/back/back/filter/JWTFilter.java
deleted file mode 100644
--- a/src/main/java/rofla/back/back/filter/JWTFilter.java	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
+++ /dev/null	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
@@ -1,79 +0,0 @@
-package rofla.back.back.filter;
-
-import jakarta.servlet.FilterChain;
-import jakarta.servlet.ServletException;
-import jakarta.servlet.http.HttpServletRequest;
-import jakarta.servlet.http.HttpServletResponse;
-import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
-import org.springframework.security.core.Authentication;
-import org.springframework.security.core.context.SecurityContextHolder;
-import org.springframework.web.filter.OncePerRequestFilter;
-import rofla.back.back.jwt.CustomUserDetails;
-import rofla.back.back.jwt.JWTUtil;
-import rofla.back.back.model.User;
-
-import java.io.IOException;
-
-public class JWTFilter extends OncePerRequestFilter {
-
-    private final JWTUtil jwtUtil;
-
-    public JWTFilter(JWTUtil jwtUtil) {
-
-        this.jwtUtil = jwtUtil;
-    }
-
-
-    @Override
-    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
-
-        //request에서 Authorization 헤더를 찾음
-        String authorization= request.getHeader("Authorization");
-
-        // /login 경로에 대해서는 JWT 검증을 하지 않음
-        String requestPath = request.getRequestURI();
-        if (requestPath.equals("/login")) {
-            filterChain.doFilter(request, response);
-            return;
-        }
-
-        //Authorization 헤더 검증
-        if (authorization == null || !authorization.startsWith("Bearer ")) {
-
-            System.out.println("token null");
-            filterChain.doFilter(request, response);
-
-            //조건이 해당되면 메소드 종료 (필수)
-            return;
-        }
-
-        String token = authorization.split(" ")[1];
-
-        //토큰 소멸 시간 검증
-        if (jwtUtil.isExpired(token)) {
-
-            System.out.println("token expired");
-            filterChain.doFilter(request, response);
-
-            //조건이 해당되면 메소드 종료 (필수)
-            return;
-        }
-
-
-        String username = jwtUtil.getUsername(token);
-        String role = jwtUtil.getRole(token);
-
-        User userEntity = new User();
-        userEntity.setUsername(username);
-        userEntity.setPassword("temppassword");
-        userEntity.setRole(role);
-
-        CustomUserDetails customUserDetails = new CustomUserDetails(userEntity);
-
-        Authentication authToken = new UsernamePasswordAuthenticationToken(customUserDetails, null, customUserDetails.getAuthorities());
-
-        SecurityContextHolder.getContext().setAuthentication(authToken);
-
-        filterChain.doFilter(request, response);
-    }
-}
Index: src/main/java/rofla/back/back/filter/LoginFilter.java
===================================================================
diff --git a/src/main/java/rofla/back/back/filter/LoginFilter.java b/src/main/java/rofla/back/back/filter/LoginFilter.java
deleted file mode 100644
--- a/src/main/java/rofla/back/back/filter/LoginFilter.java	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
+++ /dev/null	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
@@ -1,65 +0,0 @@
-package rofla.back.back.filter;
-
-
-import jakarta.servlet.FilterChain;
-import jakarta.servlet.http.HttpServletRequest;
-import jakarta.servlet.http.HttpServletResponse;
-import org.springframework.security.authentication.AuthenticationManager;
-import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
-import org.springframework.security.core.Authentication;
-import org.springframework.security.core.AuthenticationException;
-import org.springframework.security.core.GrantedAuthority;
-import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
-import rofla.back.back.jwt.CustomUserDetails;
-import rofla.back.back.jwt.JWTUtil;
-
-import java.util.Collection;
-import java.util.Iterator;
-
-public class LoginFilter extends UsernamePasswordAuthenticationFilter {
-
-    private final AuthenticationManager authenticationManager;
-    private final JWTUtil jwtUtil;
-
-    public LoginFilter(AuthenticationManager authenticationManager, JWTUtil jwtUtil) {
-
-        this.authenticationManager = authenticationManager;
-        this.jwtUtil = jwtUtil;
-    }
-
-    @Override
-    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {
-
-        String username = obtainUsername(request);
-        String password = obtainPassword(request);
-
-        System.out.println(username);
-
-        UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(username, password, null);
-
-        return authenticationManager.authenticate(authToken);
-    }
-
-    @Override
-    protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authentication) {
-
-        CustomUserDetails customUserDetails = (CustomUserDetails) authentication.getPrincipal();
-
-        String username = customUserDetails.getUsername();
-
-        Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();
-        Iterator<? extends GrantedAuthority> iterator = authorities.iterator();
-        GrantedAuthority auth = iterator.next();
-
-        String role = auth.getAuthority();
-
-        String token = jwtUtil.createJwt(username, role, 60*60*1000L);
-        System.out.println("token :" +token);
-        response.addHeader("Authorization", "Bearer " + token);
-    }
-
-    @Override
-    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) {
-        response.setStatus(401);
-    }
-}
Index: src/main/java/rofla/back/back/model/SubjectInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package rofla.back.back.model;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\n\r\n@Getter\r\n@Setter\r\n@Entity\r\n@Table(name = \"subject_info\", schema = \"grupgo\")\r\npublic class SubjectInfo {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    @Column(name = \"id\", nullable = false)\r\n    private Long id;\r\n\r\n    @Column(name = \"name\", nullable = false, length = 30)\r\n    private String name;\r\n\r\n    @Column(name = \"subject_num\", nullable = false, length = 30)\r\n    private String subjectNum;\r\n\r\n    @Column(name = \"start_time\")\r\n    private String startTime;\r\n\r\n    @Column(name = \"end_time\")\r\n    private String endTime;\r\n\r\n    @Column(name = \"classroom\", length = 30)\r\n    private String classroom;\r\n\r\n    @Column(name = \"professor\", nullable = false, length = 30)\r\n    private String professor;\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/rofla/back/back/model/SubjectInfo.java b/src/main/java/rofla/back/back/model/SubjectInfo.java
--- a/src/main/java/rofla/back/back/model/SubjectInfo.java	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
+++ b/src/main/java/rofla/back/back/model/SubjectInfo.java	(date 1721579850573)
@@ -26,7 +26,7 @@
     @Column(name = "end_time")
     private String endTime;
 
-    @Column(name = "classroom", length = 30)
+    @Column(name = "classroom", length = 300)
     private String classroom;
 
     @Column(name = "professor", nullable = false, length = 30)
Index: src/main/java/rofla/back/back/controller/BcdController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/rofla/back/back/controller/BcdController.java b/src/main/java/rofla/back/back/controller/BcdController.java
new file mode 100644
--- /dev/null	(date 1721579850571)
+++ b/src/main/java/rofla/back/back/controller/BcdController.java	(date 1721579850571)
@@ -0,0 +1,52 @@
+package rofla.back.back.controller;
+
+import org.springframework.web.bind.annotation.RestController;
+import com.google.zxing.BarcodeFormat;
+import com.google.zxing.MultiFormatWriter;
+import com.google.zxing.WriterException;
+import com.google.zxing.client.j2se.MatrixToImageWriter;
+import com.google.zxing.common.BitMatrix;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.MediaType;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+
+@RestController
+@RequiredArgsConstructor
+@Slf4j
+public class BcdController {
+    // QR 요청
+    @GetMapping("/qr")
+    public ResponseEntity<byte[]> qrToTistory() throws WriterException, IOException {
+        // QR 정보
+        int width = 200;
+        int height = 200;
+        String url = "https://lucas-owner.tistory.com/";
+
+        // QR Code - BitMatrix: qr code 정보 생성
+        BitMatrix encode = new MultiFormatWriter()
+                .encode(url, BarcodeFormat.QR_CODE, width, height);
+
+        // QR Code - Image 생성. : 1회성으로 생성해야 하기 때문에
+        // stream으로 Generate(1회성이 아니면 File로 작성 가능.)
+        try {
+            //output Stream
+            ByteArrayOutputStream out = new ByteArrayOutputStream();
+
+            //Bitmatrix, file.format, outputStream
+            MatrixToImageWriter.writeToStream(encode, "PNG", out);
+
+            return ResponseEntity.ok()
+                    .contentType(MediaType.IMAGE_PNG)
+                    .body(out.toByteArray());
+
+        }catch (Exception e){log.warn("QR Code OutputStream 도중 Excpetion 발생, {}", e.getMessage());}
+
+        return null;
+    }
+}
\ No newline at end of file
Index: src/main/java/rofla/back/back/controller/ExcelController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package rofla.back.back.controller;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.apache.poi.ss.usermodel.Cell;\r\nimport org.apache.poi.ss.usermodel.Row;\r\nimport org.apache.poi.ss.usermodel.Sheet;\r\nimport org.apache.poi.ss.usermodel.Workbook;\r\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport org.springframework.web.multipart.MultipartFile;\r\nimport rofla.back.back.jwt.JWTUtil;\r\nimport rofla.back.back.model.SubjectInfo;\r\nimport rofla.back.back.repository.SubjectInfoRepository;\r\nimport rofla.back.back.repository.SubjectRepository;\r\nimport rofla.back.back.service.ExcelService;\r\nimport rofla.back.back.service.SubjectInfoService;\r\nimport rofla.back.back.service.SubjectService;\r\nimport rofla.back.back.service.UserService;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\n@RequiredArgsConstructor\r\n@RestController\r\n@RequestMapping(\"/excel\")\r\npublic class ExcelController {\r\n    private final ExcelService excelService;\r\n    @PostMapping(\"/subjectInfo\")\r\n    public ResponseEntity<?> readSubjectExcelFile(@RequestParam(\"file\") MultipartFile file){\r\n        try {\r\n            excelService.readSubjectExcelFile(file);\r\n            return ResponseEntity.ok(\"read SubjectInfo Excel file complete\");\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest().body(e.getMessage());\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/rofla/back/back/controller/ExcelController.java b/src/main/java/rofla/back/back/controller/ExcelController.java
--- a/src/main/java/rofla/back/back/controller/ExcelController.java	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
+++ b/src/main/java/rofla/back/back/controller/ExcelController.java	(date 1721579850572)
@@ -12,7 +12,6 @@
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
-import rofla.back.back.jwt.JWTUtil;
 import rofla.back.back.model.SubjectInfo;
 import rofla.back.back.repository.SubjectInfoRepository;
 import rofla.back.back.repository.SubjectRepository;
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n\tid 'java'\r\n\tid 'org.springframework.boot' version '3.3.2'\r\n\tid 'io.spring.dependency-management' version '1.1.6'\r\n}\r\n\r\ngroup = 'rofla.back'\r\nversion = '0.0.1-SNAPSHOT'\r\n\r\njava {\r\n\ttoolchain {\r\n\t\tlanguageVersion = JavaLanguageVersion.of(22)\r\n\t}\r\n}\r\n\r\nconfigurations {\r\n\tcompileOnly {\r\n\t\textendsFrom annotationProcessor\r\n\t}\r\n}\r\n\r\nrepositories {\r\n\tmavenCentral()\r\n}\r\n\r\ndependencies {\r\n\timplementation 'org.springframework.boot:spring-boot-starter-data-jpa'\r\n\timplementation 'org.springframework.boot:spring-boot-starter-security'\r\n\timplementation 'org.springframework.boot:spring-boot-starter-web'\r\n\timplementation 'io.jsonwebtoken:jjwt-api:0.12.3'\r\n\timplementation 'io.jsonwebtoken:jjwt-impl:0.12.3'\r\n\timplementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'\r\n\timplementation 'mysql:mysql-connector-java:8.0.33'\r\n\tcompileOnly 'org.projectlombok:lombok'\r\n\tannotationProcessor 'org.projectlombok:lombok'\r\n\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\r\n\ttestImplementation 'org.springframework.security:spring-security-test'\r\n\ttestRuntimeOnly 'org.junit.platform:junit-platform-launcher'\r\n\timplementation 'org.apache.poi:poi:4.1.2'\r\n\timplementation 'org.apache.poi:poi-ooxml:4.1.2'\r\n\timplementation 'org.apache.poi:poi-scratchpad:4.1.2'\r\n}\r\n\r\ntasks.named('test') {\r\n\tuseJUnitPlatform()\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
+++ b/build.gradle	(date 1721579850569)
@@ -25,16 +25,14 @@
 
 dependencies {
 	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
-	implementation 'org.springframework.boot:spring-boot-starter-security'
 	implementation 'org.springframework.boot:spring-boot-starter-web'
-	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
-	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
-	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
 	implementation 'mysql:mysql-connector-java:8.0.33'
+	implementation group: 'net.sf.barcode4j', name: 'barcode4j', version: '2.1'
+	implementation group: 'com.google.zxing', name: 'javase', version: '3.5.0'
+	implementation group: 'com.google.zxing', name: 'core', version: '3.5.0'
 	compileOnly 'org.projectlombok:lombok'
 	annotationProcessor 'org.projectlombok:lombok'
 	testImplementation 'org.springframework.boot:spring-boot-starter-test'
-	testImplementation 'org.springframework.security:spring-security-test'
 	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
 	implementation 'org.apache.poi:poi:4.1.2'
 	implementation 'org.apache.poi:poi-ooxml:4.1.2'
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"FrameworkDetectionExcludesConfiguration\">\r\n    <file type=\"web\" url=\"file://$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_22\" default=\"true\" project-jdk-name=\"22\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"jpab\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
+++ b/.idea/misc.xml	(date 1721579850568)
@@ -1,4 +1,3 @@
-<?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
   <component name="FrameworkDetectionExcludesConfiguration">
Index: .idea/modules/back.main.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module version=\"4\">\r\n  <component name=\"FacetManager\">\r\n    <facet type=\"jpa\" name=\"JPA\">\r\n      <configuration>\r\n        <setting name=\"validation-enabled\" value=\"true\" />\r\n        <setting name=\"provider-name\" value=\"Hibernate\" />\r\n        <datasource-mapping />\r\n        <naming-strategy-map />\r\n      </configuration>\r\n    </facet>\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules/back.main.iml b/.idea/modules/back.main.iml
--- a/.idea/modules/back.main.iml	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
+++ b/.idea/modules/back.main.iml	(date 1721579850569)
@@ -1,12 +1,21 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module version="4">
+  <component name="AdditionalModuleElements">
+    <content url="file://$MODULE_DIR$/../../build/generated/sources/annotationProcessor/java/main">
+      <sourceFolder url="file://$MODULE_DIR$/../../build/generated/sources/annotationProcessor/java/main" isTestSource="false" generated="true" />
+    </content>
+  </component>
   <component name="FacetManager">
     <facet type="jpa" name="JPA">
       <configuration>
         <setting name="validation-enabled" value="true" />
         <setting name="provider-name" value="Hibernate" />
-        <datasource-mapping />
-        <naming-strategy-map />
+        <datasource-mapping>
+          <factory-entry name="entityManagerFactory" />
+        </datasource-mapping>
+        <naming-strategy-map>
+          <unit-entry name="entityManagerFactory" />
+        </naming-strategy-map>
       </configuration>
     </facet>
   </component>
Index: src/main/java/rofla/back/back/service/ExcelService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package rofla.back.back.service;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.apache.poi.ss.usermodel.Cell;\r\nimport org.apache.poi.ss.usermodel.Row;\r\nimport org.apache.poi.ss.usermodel.Sheet;\r\nimport org.apache.poi.ss.usermodel.Workbook;\r\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.web.multipart.MultipartFile;\r\nimport rofla.back.back.model.SubjectInfo;\r\nimport rofla.back.back.repository.SubjectInfoRepository;\r\nimport rofla.back.back.repository.SubjectRepository;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\n@RequiredArgsConstructor\r\n@Service\r\npublic class ExcelService {\r\n    private final SubjectInfoRepository subjectInfoRepository;\r\n    private final SubjectRepository subjectRepository;\r\n\r\n    public void readSubjectExcelFile(MultipartFile file) throws Exception{\r\n        if (file.isEmpty()) {\r\n            throw new IllegalArgumentException(\"Uploaded file is empty\");\r\n        }\r\n        try (Workbook workbook = new XSSFWorkbook(file.getInputStream())) {\r\n            Sheet sheet = workbook.getSheetAt(0);\r\n            for (Row row : sheet) {\r\n                if (row.getRowNum() == 0) { // Skip header row\r\n                    continue;\r\n                }\r\n                SubjectInfo subjectInfo = new SubjectInfo();\r\n                for (Cell cell : row) {\r\n                    // 엑셀 열을 기준으로 집어넣을 항목\r\n                    switch (cell.getColumnIndex()) {\r\n                        case 0:\r\n                            break;\r\n                        case 4:\r\n                            subjectInfo.setSubjectNum(cell.toString());\r\n                            break;\r\n                        case 5:\r\n                            //\r\n                            subjectInfo.setName(cell.toString());\r\n                            break;\r\n                        case 6:\r\n                            //\r\n                            subjectInfo.setProfessor(cell.toString());\r\n                            break;\r\n                        case 8:\r\n                            String input = cell.toString();\r\n                            String[] parts = input.split(\",\");\r\n                            String startTime =\"\";\r\n                            String endTime =\"\";\r\n                            // 각 부분에서 요일과 시간을 추출\r\n                            for (String part : parts) {\r\n                                extractTimes(part,startTime,endTime);\r\n                            }\r\n                            subjectInfo.setStartTime(startTime);\r\n                            subjectInfo.setEndTime(endTime);\r\n                            break;\r\n                        case 9:\r\n                            // 과목명\r\n                            subjectInfo.setClassroom(cell.toString());\r\n                            break;\r\n                    }\r\n                }\r\n                subjectInfoRepository.save(subjectInfo);\r\n            }\r\n        } catch(Exception e){\r\n            throw e;\r\n        }\r\n    }\r\n    public void extractTimes(String input, String startTime, String endTime){\r\n        Pattern pattern = Pattern.compile(\"(\\\\D+)(\\\\d+(?:\\\\.\\\\d+)?-\\\\d+(?:\\\\.\\\\d+)?)/(\\\\d{1,2}:\\\\d{2})-(\\\\d{1,2}:\\\\d{2})\");\r\n        Matcher matcher = pattern.matcher(input);\r\n        if(startTime != \"\"){\r\n            startTime += \",\";\r\n            endTime += \",\";\r\n        }\r\n        if (matcher.find()) {\r\n            String day = matcher.group(1); // 요일\r\n            startTime += day + matcher.group(3); // 시작 시간2\r\n            endTime += day + matcher.group(4); // 마감 시간2\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/rofla/back/back/service/ExcelService.java b/src/main/java/rofla/back/back/service/ExcelService.java
--- a/src/main/java/rofla/back/back/service/ExcelService.java	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
+++ b/src/main/java/rofla/back/back/service/ExcelService.java	(date 1721579850574)
@@ -54,14 +54,14 @@
                         case 8:
                             String input = cell.toString();
                             String[] parts = input.split(",");
-                            String startTime ="";
-                            String endTime ="";
+                            StringBuilder startTime = new StringBuilder();
+                            StringBuilder endTime = new StringBuilder();
                             // 각 부분에서 요일과 시간을 추출
                             for (String part : parts) {
                                 extractTimes(part,startTime,endTime);
                             }
-                            subjectInfo.setStartTime(startTime);
-                            subjectInfo.setEndTime(endTime);
+                            subjectInfo.setStartTime(startTime.toString());
+                            subjectInfo.setEndTime(endTime.toString());
                             break;
                         case 9:
                             // 과목명
@@ -75,17 +75,17 @@
             throw e;
         }
     }
-    public void extractTimes(String input, String startTime, String endTime){
+    public void extractTimes(String input, StringBuilder startTime, StringBuilder endTime){
         Pattern pattern = Pattern.compile("(\\D+)(\\d+(?:\\.\\d+)?-\\d+(?:\\.\\d+)?)/(\\d{1,2}:\\d{2})-(\\d{1,2}:\\d{2})");
         Matcher matcher = pattern.matcher(input);
-        if(startTime != ""){
-            startTime += ",";
-            endTime += ",";
+        if(!startTime.isEmpty()){
+            startTime.append(",");
+            endTime.append(",");
         }
         if (matcher.find()) {
             String day = matcher.group(1); // 요일
-            startTime += day + matcher.group(3); // 시작 시간2
-            endTime += day + matcher.group(4); // 마감 시간2
+            startTime.append(day).append(matcher.group(3)); // 시작 시간2
+            endTime.append(day).append(matcher.group(4)); // 마감 시간2
         }
     }
 }
Index: src/main/java/rofla/back/back/BackApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package rofla.back.back;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class BackApplication {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(BackApplication.class, args);\r\n\t}\r\n\r\n}\r\n//ni
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/rofla/back/back/BackApplication.java b/src/main/java/rofla/back/back/BackApplication.java
--- a/src/main/java/rofla/back/back/BackApplication.java	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
+++ b/src/main/java/rofla/back/back/BackApplication.java	(date 1721579850570)
@@ -2,8 +2,9 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;
 
-@SpringBootApplication
+@SpringBootApplication(exclude = SecurityAutoConfiguration.class)
 public class BackApplication {
 
 	public static void main(String[] args) {
@@ -11,4 +12,3 @@
 	}
 
 }
-//ni
\ No newline at end of file
Index: src/main/java/rofla/back/back/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package rofla.back.back.service;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\nimport rofla.back.back.model.User;\r\nimport rofla.back.back.repository.UserRepository;\r\n\r\nimport java.util.Optional;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class UserService {\r\n    private final UserRepository userRepository;\r\n    private final BCryptPasswordEncoder bCryptPasswordEncoder;\r\n\r\n    // 회원가입\r\n    public void saveUser(User users) {\r\n        if (userRepository.findByUsername(users.getUsername()).isPresent()) {\r\n            throw new IllegalArgumentException(\"동일한 아이디가 있는 유저가 존재 합니다.\");\r\n        }\r\n        // 암호화 후 저장\r\n        String password =  users.getPassword();\r\n        users.setPassword(bCryptPasswordEncoder.encode(password));\r\n        userRepository.save(users);\r\n    }\r\n\r\n    //조회\r\n    public Optional<User> searchUserByUsername(String username) {\r\n        return userRepository.findByUsername(username);\r\n    }\r\n\r\n    //수정\r\n    public Optional<User> modifyUser(User newUser) {\r\n        return userRepository.findByUsername(newUser.getUsername())\r\n                .map(User -> {\r\n                    User.setId(newUser.getId());\r\n                    User.setName(newUser.getName());\r\n                    User.setUsername(newUser.getUsername());\r\n                    User.setPassword(newUser.getPassword());\r\n                    User.setPhoneNum(newUser.getPhoneNum());\r\n                    User.setMajor(newUser.getMajor());\r\n                    User.setRole(newUser.getRole());\r\n                    return userRepository.save(User);\r\n                });\r\n    }\r\n\r\n\r\n    //삭제\r\n    public void deleteUser(String username) {\r\n        if(userRepository.findByUsername(username).isPresent()) {\r\n            userRepository.delete(userRepository.findByUsername(username).get());\r\n        }\r\n        else {\r\n            System.out.println(\"not Present in DB!\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/rofla/back/back/service/UserService.java b/src/main/java/rofla/back/back/service/UserService.java
--- a/src/main/java/rofla/back/back/service/UserService.java	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
+++ b/src/main/java/rofla/back/back/service/UserService.java	(date 1721579850575)
@@ -1,7 +1,6 @@
 package rofla.back.back.service;
 
 import lombok.RequiredArgsConstructor;
-import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
 import org.springframework.stereotype.Service;
 import rofla.back.back.model.User;
 import rofla.back.back.repository.UserRepository;
@@ -12,16 +11,11 @@
 @RequiredArgsConstructor
 public class UserService {
     private final UserRepository userRepository;
-    private final BCryptPasswordEncoder bCryptPasswordEncoder;
-
     // 회원가입
     public void saveUser(User users) {
         if (userRepository.findByUsername(users.getUsername()).isPresent()) {
             throw new IllegalArgumentException("동일한 아이디가 있는 유저가 존재 합니다.");
         }
-        // 암호화 후 저장
-        String password =  users.getPassword();
-        users.setPassword(bCryptPasswordEncoder.encode(password));
         userRepository.save(users);
     }
 
Index: src/main/java/rofla/back/back/controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package rofla.back.back.controller;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.multipart.MultipartFile;\r\nimport rofla.back.back.jwt.JWTUtil;\r\nimport rofla.back.back.model.User;\r\nimport rofla.back.back.service.UserService;\r\n\r\nimport java.io.IOException;\r\n\r\n@RestController\r\n@RequiredArgsConstructor\r\n@RequestMapping(\"/User\")\r\npublic class UserController {\r\n\r\n    private final UserService userService;\r\n    private final JWTUtil jwtUtil;\r\n\r\n    // POST :  [/User/join] 유저 추가 (학번 중복 확인)\r\n    @PostMapping(\"/join\")\r\n    public ResponseEntity<String> saveUser(@RequestBody User users) {\r\n        try {\r\n            userService.saveUser(users);\r\n            return ResponseEntity.ok(\"회원가입 성공!\");\r\n        } catch (IllegalArgumentException e) {\r\n            return ResponseEntity.status(409).body(e.getMessage());\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/rofla/back/back/controller/UserController.java b/src/main/java/rofla/back/back/controller/UserController.java
--- a/src/main/java/rofla/back/back/controller/UserController.java	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
+++ b/src/main/java/rofla/back/back/controller/UserController.java	(date 1721579850573)
@@ -4,7 +4,6 @@
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.*;
 import org.springframework.web.multipart.MultipartFile;
-import rofla.back.back.jwt.JWTUtil;
 import rofla.back.back.model.User;
 import rofla.back.back.service.UserService;
 
@@ -16,7 +15,6 @@
 public class UserController {
 
     private final UserService userService;
-    private final JWTUtil jwtUtil;
 
     // POST :  [/User/join] 유저 추가 (학번 중복 확인)
     @PostMapping("/join")
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.application.name=Rofla_BACK\r\n\r\n# DB\r\nspring.datasource.url=jdbc:mysql://grupgo.crsw2yc4wwwt.ap-northeast-2.rds.amazonaws.com:3306/grupgo\r\nspring.datasource.username=grupgo\r\nspring.datasource.password=grupgo12345\r\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\r\n# JWT\r\nspring.jwt.secret=vmfhaltmskdlstkfkdgodyroqkfwkdbalroqkfwkdbalaaaaaaaaaaaaaaaabbbbb
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision 7d2c7da734958bd7aa84fc606d7c0c2822e505fd)
+++ b/src/main/resources/application.properties	(date 1721579850576)
@@ -4,6 +4,4 @@
 spring.datasource.url=jdbc:mysql://grupgo.crsw2yc4wwwt.ap-northeast-2.rds.amazonaws.com:3306/grupgo
 spring.datasource.username=grupgo
 spring.datasource.password=grupgo12345
-spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
-# JWT
-spring.jwt.secret=vmfhaltmskdlstkfkdgodyroqkfwkdbalroqkfwkdbalaaaaaaaaaaaaaaaabbbbb
\ No newline at end of file
+spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\
\ No newline at end of file
